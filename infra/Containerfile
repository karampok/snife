FROM alpine:latest AS build

ARG TSVERSION=1.62.0

WORKDIR /app
RUN apk add --no-cache curl tar

RUN curl -vsLo tailscale.tar.gz "https://pkgs.tailscale.com/stable/tailscale_${TSVERSION}_amd64.tgz" && \
  tar xzf tailscale.tar.gz --strip-components=1

FROM fedora:40 as runtime
LABEL description="Run container"

#RUN echo -ne "[racadm]\nname=Racadm\nbaseurl=http://linux.dell.com/repo/hardware/dsu/os_dependent/RHEL8_64\nenabled=1\ngpgcheck=0" > /etc/yum.repos.d/racadm.repo

RUN dnf install -y numactl strace ipcalc iptables file bind-utils tcpdump nmap-ncat iputils iproute \
      podman pip openssl coreos-installer dnf-plugin-config-manager tmux dhcp-client openssh-clients wget \
      nmstate procps-ng hwloc-gui hwloc wireguard-tools inotify-tools hostname tini tree \
      openssh-server libvirt-devel tree mosh python3-jinja2-cli gcc python3-devel git mosh stress bridge-utils conntrack-tools \
      vim htop jq xz && dnf clean all

RUN setcap 'cap_net_raw+ep' /usr/sbin/tcpdump
RUN curl https://raw.githubusercontent.com/karmab/kcli/main/install.sh | sudo bash

RUN cd /tmp \
    && wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 \
    && chmod +x /usr/local/bin/yq

RUN cd /tmp \
    && curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 \
    && install -m 555 argocd-linux-amd64 /usr/local/bin/argocd \
    && rm argocd-linux-amd64

RUN cd /tmp \
    && curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 \
    && install -m 555 argocd-linux-amd64 /usr/local/bin/argocd \
    && rm argocd-linux-amd64

RUN cd /tmp \
    && curl -sSL -o gh_linux_amd64.tar.gz https://github.com/cli/cli/releases/download/v2.40.0/gh_2.40.0_linux_amd64.tar.gz \
    && tar -xzf gh_linux_amd64.tar.gz \
    && mv gh_*/bin/gh /usr/local/bin/gh \
    && rm -rf gh_*

RUN cd /tmp \
  && curl -L --output /usr/bin/gitlab-runner "https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64" \
  && chmod +x /usr/bin/gitlab-runner

RUN cd /tmp \
  && curl https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/latest/openshift-client-linux.tar.gz -o openshift-client-linux.tar.gz && tar xvfz openshift-client-linux.tar.gz \
  && mv oc kubectl /usr/bin/ && chmod +x /usr/bin/{oc,kubectl} && rm -f README.md openshift-client-linux.tar.gz

RUN cd /tmp \
  && curl https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/latest/openshift-install-linux.tar.gz -o openshift-install-linux.tar.gz && tar xvfz openshift-install-linux.tar.gz \
  && mv openshift-install /usr/bin/ && chmod +x /usr/bin/openshift-install && rm -f README.md openshift-install-linux.tar.gz

COPY --from=build /app/tailscale /usr/bin/
COPY --from=build /app/tailscaled /usr/bin/
COPY bin/* /usr/bin/
RUN mkdir -p /share /iso
ENV TERM xterm

#RUN printf 'python3 -m http.server 9000 -d /share\n' >> /etc/motd
#RUN printf 'mutagen sync create --name=<hostname> (pwd) root@hostname:/workspace -i bin\n' >> /etc/motd

USER root

EXPOSE 51820/udp
EXPOSE 2022/tcp
EXPOSE 9000/tcp

WORKDIR /workdir
ENTRYPOINT ["/usr/bin/tini", "--"]
CMD ["start-ts.sh"]
#CMD ["wg-quick", "up", "$WG_INTERFACE_NAME"]
#https://tailscale.com/kb/1111/ephemeral-nodes/
#https://gist.github.com/hamishforbes/2ac7ae9d7ea47cad4e3a813c9b45c10f
